package postgresql

import (
	"net/http"
	"strings"

	"github.com/tbaud0n/go-rql-parser"
	"github.com/tbaud0n/sample-api-architecture/pkg/logger"
)

// QueryFilter used to filter the SQL query
type QueryFilter struct {
	Where  string
	Sort   string
	Limit  string
	Offset string
	Args   []interface{}
}

// String returns the filter string for the SQL request
func (f *QueryFilter) String() (s string) {
	if f.Where != `` {
		s = ` WHERE ` + f.Where
	}

	if f.Sort != `` {
		s += f.Sort
	}

	if f.Limit != `` {
		s += f.Limit
	}

	if f.Offset != `` {
		s += f.Offset
	}

	return
}

// QueryFilterFromHTTPRequest parses the RQL (Resource Query Language) arguments of HTTP request
// and returns a *postgresql.QueryFilter
func QueryFilterFromHTTPRequest(r *http.Request) (interface{}, error) {
	if r == nil {
		return nil, nil
	}

	p := rqlParser.NewParser()
	rqlNode, err := p.Parse(strings.NewReader(r.URL.RawQuery))
	if err != nil {
		return nil, logger.LogError(err)
	}

	rt := rqlParser.NewSqlTranslator(rqlNode)

	where, err := rt.Where()
	if err != nil {
		return nil, logger.LogError(err)
	}

	where = strings.Replace(where, "%", `%%`, -1)

	qf := &QueryFilter{
		Where:  where,
		Sort:   rt.Sort(),
		Limit:  rt.Limit(),
		Offset: rt.Offset(),
	}

	return qf, nil

}

// SQLQuery append the query with the sql generated by the QueryFilter
func SQLQuery(base string, qf *QueryFilter) string {
	if qf == nil {
		return base
	}

	qs := qf.String()
	if qs != `` {
		qs = ` ` + qs
	}

	return base + qs
}
